/*
 * Given a linked list, swap every two adjacent nodes and return its head.

	For example,
	
	Given 1->2->3->4, you should return the list as 2->1->4->3.

	Your algorithm should use only constant space. 
	
	You may not modify the values in the list, only nodes itself can be changed.
 * */


public class SwapNodesInPairs {

	public static ListNode swapPairs(ListNode head) {
        
		 	if(head == null) return null;
			if(head.next == null) return head;
			ListNode newHead = new ListNode(0);
			ListNode preEnd = null;
			ListNode second;
			
			// swapping from the end
			while(true){
				second = head.next;
				head.next = head.next.next;
				second.next = head;
				
				if(newHead.next != null){
					preEnd.next = second;
				}
				if(newHead.next == null){
					newHead.next = second;
				}
				preEnd = second.next;
				// move to the next pair
				if(head.next == null) break; // even number of nodes
				head = head.next;
				if(head.next == null){ // odd number of nodes
					preEnd.next = head;
					break;
				}
			}
			
			return newHead.next;
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		ListNode a = new ListNode(1);
		ListNode b = new ListNode(2);
		a.next = b;
		ListNode tmp = swapPairs(a);

	}

}
